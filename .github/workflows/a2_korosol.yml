name: üöÄ Deploy to A2 Hosting

on:
  push:
    branches: [dev/pipelineTry]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  DEPLOY_PATH: 'PROD_THINGS/dotnet/kobflow/github_actions_delivery'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üîÑ Restore and Build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: üì§ Publish projects
      run: |
        dotnet publish ./Kuaminika.KobFlow.API.Expense/Kuaminika.KobFlow.API.Expense.csproj -c Release -o publish/ --nologo

    - name: üîë Install SSHpass
      run: sudo apt-get install -y sshpass

    - name: üß™ Test directory access
      run: |
        echo "Testing if we can write to existing directory..."
        sshpass -p "${{ env.SSH_PASSWORD }}" ssh -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
          "touch ${{ env.DEPLOY_PATH }}/test_write.txt && echo '‚úÖ Can write to directory' || echo '‚ùå Cannot write to directory'"

    - name: üóëÔ∏è Clean existing directory (optional)
      run: |
        echo "Cleaning existing directory..."
        sshpass -p "${{ env.SSH_PASSWORD }}" ssh -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
          "rm -rf ${{ env.DEPLOY_PATH }}/*"

    - name: üöÄ Deploy using SCP (no directory creation)
      run: |
        echo "Deploying files using SCP..."
        # Deploy the contents without trying to create directories
        sshpass -p "${{ env.SSH_PASSWORD }}" scp -P ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no -r \
          publish/* ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.DEPLOY_PATH }}/

    - name: üîí Set permissions
      run: |
        echo "Setting file permissions..."
        sshpass -p "${{ env.SSH_PASSWORD }}" ssh -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
          "chmod 755 -R ${{ env.DEPLOY_PATH }} && find ${{ env.DEPLOY_PATH }} -type f -exec chmod 644 {} \;"

    - name: ‚úÖ Verify deployment
      run: |
        sshpass -p "${{ env.SSH_PASSWORD }}" ssh -p ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
          ${{ env.SSH_USER }}@${{ env.SSH_HOST }} \
          "ls -la ${{ env.DEPLOY_PATH }} && echo 'üéâ Deployment successful!'"
